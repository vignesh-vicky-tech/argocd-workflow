name: Deploy to ArgoCD
on:
  workflow_dispatch: 
    inputs:
      name:
        description: 'Name of the EKS cluster'  
        required: true 
      Reponame:
        description: 'Reponame'
        required: true
 
     

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
        - name: Print Helloworld
          run: |
             echo "hello"
             echo "${{ github.event.inputs.name}}" 
             echo "https://github.com/vignesh-vicky-tech/${{ github.event.inputs.Reponame }}.git" 

        - name: Set up SSH key
          run: |
             mkdir -p ~/.ssh/
             echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa_2.pub
             hostname -I

        
        - name: Checkout Repository
          uses: actions/checkout@v2

        
        - name: Step 1
          run: |
            bash install_docker_k8s.sh
            sudo microk8s kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
            sudo microk8s kubectl get svc -n argocd -o wide    
            hostname -I
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64

            sudo microk8s kubectl config set-context --current --namespace=argocd
            sudo argocd login cd.argoproj.io --core
            sudo argocd version

            
            
        # - name: Set up ArgoCD CLI
        #   uses: clowdhaus/argo-cd-action/@main
        #   with:
        #    server: ${{ secrets.ARGOCD_SERVER }}
        #    token: ${{ secrets.ARGOCD_TOKEN }}
        #    insecure: true

  #       - uses: clowdhaus/argo-cd-action/@main
  #         env:
  #   # Only required for first step in job where API is called
  #   # All subsequent setps in a job will not re-download the CLI
  #            GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
  #         with:
  #          command: version
  #          options: --client
  #       - uses: clowdhaus/argo-cd-action/@main
  # # # CLI has already been downloaded in prior step, no call to GitHub API
  #         with:
  #          command: version
  #          options: --client
          
        # - name: Debug ArgoCD Commands
        #   run: |
        #     argocd version
          


        # - name: Set up Kubernetes Config
        #   run: echo ${{ secrets.KUBECONFIG }} | base64 -d > kubeconfig
        #   shell: bash

      
        
        # - name: Create or Update ArgoCD Application
        #   run: |
        #    argocd app create my-app \
        #     --repo https://github.com/yourusername/your-repo.git \
        #     --path path/to/application \
        #     --dest-server https://kubernetes.default.svc \
        #     --dest-namespace my-namespace \
        #     --upsert
        #   env:
        #    KUBECONFIG: kubeconfig


   
         
        # - uses: actions/checkout@v1
        # - uses: actions-hub/kubectl@master
        #   env:
        #     KUBECONFIG: ${{ secrets.KUBECONFIG }}
        #   with: 
        #     args: get pods

        # - name: Apply ArgoCD Application Manifest
        #   run: |
        #    kubectl apply -f deploy.yaml
      
      # - name: ArgoCD Login
         
      #   run: |
      #     argocd login 172.30.46.16:32145 --username admin --password OJjZ1gAeWCh4tjC0
        
      # - name: Create or Update ArgoCD Application
      #   run: |
      #     argocd app create my-app \
      #       --project default
      #       --repo https://github.com/vignesh-vicky-tech/repo14.git \
      #       --path yaml-files \
      #       --dest-server https://kubernetes.default.svc \
      #       --dest-namespace default 
      # - name: Sync app
      #   run: |
      #     argocd app sync my-app
